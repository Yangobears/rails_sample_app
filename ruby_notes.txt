string interpolation:
first_name = "Yan"
"#{first_name} Li"


puts v.s. prints

puts "foo" == print "foo\n"

single quote v.s. double quote:
>> '#{foo} bar'     # Single-quoted strings don't allow interpolation
=> "\#{foo} bar"

single quote --> literally

>> '\n'       # A literal 'backslash n' combination
=> "\\n"

if
elsif
end

nil is special:
only ruby object that is false in a boolean context,
apart from false itself

>> !!nil
=> false
>> !!0
=> true

ruby implicit==> return the last statement evaluated v.s. explicit return

! would mutate array

>> a = %w[foo bar baz quux]         # Use %w to make a string array.
=> ["foo", "bar", "baz", "quux"]

{ :name => "Michael Hartl", :email => "michael@example.com" }
equals
{ name: "Michael Hartl", email: "michael@example.com" }

inspect method, which returns a string with a literal representation of the object itâ€™s called on:

.inspect  also equals p
>> p :name             # Same output as 'puts :name.inspect'
:name



